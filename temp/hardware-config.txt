# hardware-configuration.nix - Example hardware configuration for NixOS
# Part of the Linux Mastery Journey project
#
# This is an example of the hardware configuration file generated by nixos-generate-config
# The actual file will be specific to your hardware and should not be edited manually
# unless you know what you're doing.

{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  # Kernel modules
  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "ahci" "usb_storage" "usbhid" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];  # Change to kvm-amd for AMD processors
  boot.extraModulePackages = [ ];

  # Filesystems
  # Example for UEFI system with encrypted root on BTRFS
  fileSystems."/" =
    { device = "/dev/mapper/cryptroot";
      fsType = "btrfs";
      options = [ "subvol=@" "compress=zstd" "noatime" ];
    };

  fileSystems."/home" =
    { device = "/dev/mapper/cryptroot";
      fsType = "btrfs";
      options = [ "subvol=@home" "compress=zstd" "noatime" ];
    };

  fileSystems."/nix" =
    { device = "/dev/mapper/cryptroot";
      fsType = "btrfs";
      options = [ "subvol=@nix" "compress=zstd" "noatime" ];
    };

  fileSystems."/var" =
    { device = "/dev/mapper/cryptroot";
      fsType = "btrfs";
      options = [ "subvol=@var" "compress=zstd" "noatime" ];
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/XXXX-XXXX";  # Replace with actual UUID
      fsType = "vfat";
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/XXXX-XXXX-XXXX-XXXX";  # Replace with actual UUID 
      }
    ];

  # LUKS encryption
  boot.initrd.luks.devices."cryptroot" = {
    device = "/dev/disk/by-uuid/XXXX-XXXX-XXXX-XXXX";  # Replace with actual UUID
    preLVM = true;
    allowDiscards = true;  # Enable TRIM for SSDs
  };

  # CPU configuration
  # This example is for a laptop with Intel CPU
  # Adjust according to your hardware
  powerManagement.cpuFreqGovernor = "powersave";
  # For desktop systems, consider using "performance" instead
  # powerManagement.cpuFreqGovernor = "performance";

  # Hardware-specific settings
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  # For AMD CPUs, use:
  # hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  # Enable all firmware that redistribution is allowed for
  hardware.enableRedistributableFirmware = true;

  # Power management for laptops
  # Comment out or adjust for desktop systems
  services.tlp = {
    enable = true;
    settings = {
      CPU_SCALING_GOVERNOR_ON_AC = "performance";
      CPU_SCALING_GOVERNOR_ON_BAT = "powersave";
      CPU_ENERGY_PERF_POLICY_ON_AC = "performance";
      CPU_ENERGY_PERF_POLICY_ON_BAT = "power";
      CPU_MIN_PERF_ON_AC = 0;
      CPU_MAX_PERF_ON_AC = 100;
      CPU_MIN_PERF_ON_BAT = 0;
      CPU_MAX_PERF_ON_BAT = 50;
    };
  };

  # Hardware-specific tweaks

  # For laptops with hybrid graphics (Intel + NVIDIA)
  # hardware.nvidia.prime = {
  #   offload.enable = true;
  #   intelBusId = "PCI:0:2:0";  # Use lspci to find the correct bus ID
  #   nvidiaBusId = "PCI:1:0:0";  # Use lspci to find the correct bus ID
  # };

  # For systems with multiple displays
  # services.xserver.xrandrHeads = [ "HDMI-0" "DP-0" ];

  # For systems with specific hardware buttons
  # services.acpid.enable = true;

  # For systems with specific audio hardware
  # sound.extraConfig = ''
  #   options snd-hda-intel model=laptop
  # '';

  # For systems with specific boot requirements
  # boot.loader.grub.extraEntries = ''
  #   menuentry "Windows" {
  #     chainloader (hd0,1)+1
  #   }
  # '';

  # Other hardware-specific settings can be added here
}
